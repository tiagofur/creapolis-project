version: "3.9"

services:
  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    container_name: creapolis-postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-creapolis}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-creapolis_password_2024}
      POSTGRES_DB: ${POSTGRES_DB:-creapolis_db}
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/prisma/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    networks:
      - creapolis-network
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "pg_isready -U ${POSTGRES_USER:-creapolis} -d ${POSTGRES_DB:-creapolis_db}",
        ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: production
    container_name: creapolis-backend
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      NODE_ENV: ${NODE_ENV:-production}
      PORT: ${BACKEND_PORT:-3000}
      DATABASE_URL: postgresql://${POSTGRES_USER:-creapolis}:${POSTGRES_PASSWORD:-creapolis_password_2024}@postgres:5432/${POSTGRES_DB:-creapolis_db}?schema=public
      JWT_SECRET: ${JWT_SECRET:-your-super-secret-jwt-key-change-this-in-production}
      JWT_EXPIRES_IN: ${JWT_EXPIRES_IN:-7d}
      GOOGLE_CLIENT_ID: ${GOOGLE_CLIENT_ID:-}
      GOOGLE_CLIENT_SECRET: ${GOOGLE_CLIENT_SECRET:-}
      GOOGLE_REDIRECT_URI: ${GOOGLE_REDIRECT_URI:-http://localhost:3001/api/integrations/google/callback}
      CORS_ORIGIN: ${CORS_ORIGIN:-http://localhost:5173}
      RATE_LIMIT_WINDOW_MS: ${RATE_LIMIT_WINDOW_MS:-900000}
      RATE_LIMIT_MAX_REQUESTS: ${RATE_LIMIT_MAX_REQUESTS:-100}
    ports:
      - "${BACKEND_PORT:-3001}:3001"
    networks:
      - creapolis-network
    volumes:
      # Solo para desarrollo - comentar en producción
      # - ./backend/src:/app/src:ro
      - backend_logs:/app/logs
    command: sh -c "npx prisma migrate deploy && node src/server.js"
    healthcheck:
      test:
        [
          "CMD",
          "node",
          "-e",
          "require('http').get('http://localhost:3001/api/health', (r) => {process.exit(r.statusCode === 200 ? 0 : 1)})",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # PgAdmin (Opcional - herramienta de administración de BD)
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: creapolis-pgadmin
    restart: unless-stopped
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_EMAIL:-admin@creapolis.com}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD:-admin}
      PGADMIN_CONFIG_SERVER_MODE: "False"
      PGADMIN_CONFIG_MASTER_PASSWORD_REQUIRED: "False"
    ports:
      - "${PGADMIN_PORT:-5050}:80"
    networks:
      - creapolis-network
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    depends_on:
      - postgres
    profiles:
      - tools # Solo se inicia si se especifica: docker-compose --profile tools up

networks:
  creapolis-network:
    driver: bridge
    name: creapolis-network

volumes:
  postgres_data:
    driver: local
    name: creapolis-postgres-data
  pgadmin_data:
    driver: local
    name: creapolis-pgadmin-data
  backend_logs:
    driver: local
    name: creapolis-backend-logs
