generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   Int                   @id @default(autoincrement())
  email                String                @unique
  password             String
  name                 String
  role                 Role                  @default(TEAM_MEMBER)
  avatarUrl            String?
  googleAccessToken    String?
  googleRefreshToken   String?
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  projects             ProjectMember[]
  assignedTasks        Task[]
  timeLogs             TimeLog[]
  ownedWorkspaces      Workspace[]           @relation("WorkspaceOwner")
  sentInvitations      WorkspaceInvitation[] @relation("InvitationSender")
  workspaceMemberships WorkspaceMember[]

  @@index([email])
}

model Workspace {
  id                       Int                   @id @default(autoincrement())
  name                     String
  description              String?
  avatarUrl                String?
  type                     WorkspaceType         @default(TEAM)
  ownerId                  Int
  allowGuestInvites        Boolean               @default(true)
  requireEmailVerification Boolean               @default(true)
  autoAssignNewMembers     Boolean               @default(false)
  defaultProjectTemplate   String?
  timezone                 String                @default("UTC")
  language                 String                @default("es")
  createdAt                DateTime              @default(now())
  updatedAt                DateTime              @updatedAt
  projects                 Project[]
  owner                    User                  @relation("WorkspaceOwner", fields: [ownerId], references: [id], onDelete: Cascade)
  invitations              WorkspaceInvitation[]
  members                  WorkspaceMember[]

  @@index([ownerId])
  @@index([name])
}

model WorkspaceMember {
  id           Int           @id @default(autoincrement())
  workspaceId  Int
  userId       Int
  role         WorkspaceRole @default(MEMBER)
  joinedAt     DateTime      @default(now())
  lastActiveAt DateTime?
  isActive     Boolean       @default(true)
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  workspace    Workspace     @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@unique([workspaceId, userId])
  @@index([workspaceId])
  @@index([userId])
}

model WorkspaceInvitation {
  id            Int              @id @default(autoincrement())
  workspaceId   Int
  inviterUserId Int
  inviteeEmail  String
  role          WorkspaceRole    @default(MEMBER)
  token         String           @unique
  status        InvitationStatus @default(PENDING)
  createdAt     DateTime         @default(now())
  expiresAt     DateTime
  inviter       User             @relation("InvitationSender", fields: [inviterUserId], references: [id], onDelete: Cascade)
  workspace     Workspace        @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@index([workspaceId])
  @@index([inviteeEmail])
  @@index([token])
}

model Project {
  id          Int             @id @default(autoincrement())
  name        String
  description String?
  workspaceId Int
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  workspace   Workspace       @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  members     ProjectMember[]
  tasks       Task[]

  @@index([workspaceId])
  @@index([name])
}

model ProjectMember {
  id        Int      @id @default(autoincrement())
  userId    Int
  projectId Int
  joinedAt  DateTime @default(now())
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, projectId])
  @@index([userId])
  @@index([projectId])
}

model Task {
  id             Int          @id @default(autoincrement())
  title          String
  description    String?
  status         TaskStatus   @default(PLANNED)
  estimatedHours Float
  actualHours    Float        @default(0)
  startDate      DateTime?
  endDate        DateTime?
  projectId      Int
  assigneeId     Int?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  predecessors   Dependency[] @relation("TaskPredecessors")
  successors     Dependency[] @relation("TaskSuccessors")
  assignee       User?        @relation(fields: [assigneeId], references: [id])
  project        Project      @relation(fields: [projectId], references: [id], onDelete: Cascade)
  timeLogs       TimeLog[]

  @@index([projectId])
  @@index([assigneeId])
  @@index([status])
}

model Dependency {
  id            Int            @id @default(autoincrement())
  predecessorId Int
  successorId   Int
  type          DependencyType @default(FINISH_TO_START)
  createdAt     DateTime       @default(now())
  predecessor   Task           @relation("TaskPredecessors", fields: [predecessorId], references: [id], onDelete: Cascade)
  successor     Task           @relation("TaskSuccessors", fields: [successorId], references: [id], onDelete: Cascade)

  @@unique([predecessorId, successorId])
  @@index([predecessorId])
  @@index([successorId])
}

model TimeLog {
  id        Int       @id @default(autoincrement())
  taskId    Int
  userId    Int
  startTime DateTime
  endTime   DateTime?
  duration  Float?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  task      Task      @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([taskId])
  @@index([userId])
  @@index([startTime])
}

enum Role {
  ADMIN
  PROJECT_MANAGER
  TEAM_MEMBER
}

enum TaskStatus {
  PLANNED
  IN_PROGRESS
  COMPLETED
}

enum DependencyType {
  FINISH_TO_START
  START_TO_START
}

enum WorkspaceType {
  PERSONAL
  TEAM
  ENTERPRISE
}

enum WorkspaceRole {
  OWNER
  ADMIN
  MEMBER
  GUEST
}

enum InvitationStatus {
  PENDING
  ACCEPTED
  DECLINED
  EXPIRED
}
