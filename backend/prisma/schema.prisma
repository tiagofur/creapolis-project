// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enums
enum Role {
  ADMIN
  PROJECT_MANAGER
  TEAM_MEMBER
}

enum TaskStatus {
  PLANNED
  IN_PROGRESS
  COMPLETED
}

enum DependencyType {
  FINISH_TO_START
  START_TO_START
}

// Models
model User {
  id                 Int       @id @default(autoincrement())
  email              String    @unique
  password           String
  name               String
  role               Role      @default(TEAM_MEMBER)
  googleAccessToken  String?
  googleRefreshToken String?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt

  // Relations
  projects           ProjectMember[]
  assignedTasks      Task[]
  timeLogs           TimeLog[]

  @@index([email])
}

model Project {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  members     ProjectMember[]
  tasks       Task[]

  @@index([name])
}

model ProjectMember {
  id        Int      @id @default(autoincrement())
  userId    Int
  projectId Int
  joinedAt  DateTime @default(now())

  // Relations
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@unique([userId, projectId])
  @@index([userId])
  @@index([projectId])
}

model Task {
  id             Int        @id @default(autoincrement())
  title          String
  description    String?
  status         TaskStatus @default(PLANNED)
  estimatedHours Float
  actualHours    Float      @default(0)
  startDate      DateTime?
  endDate        DateTime?
  projectId      Int
  assigneeId     Int?
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt

  // Relations
  project        Project      @relation(fields: [projectId], references: [id], onDelete: Cascade)
  assignee       User?        @relation(fields: [assigneeId], references: [id], onDelete: SetNull)
  timeLogs       TimeLog[]
  predecessors   Dependency[] @relation("TaskPredecessors")
  successors     Dependency[] @relation("TaskSuccessors")

  @@index([projectId])
  @@index([assigneeId])
  @@index([status])
}

model Dependency {
  id             Int            @id @default(autoincrement())
  predecessorId  Int
  successorId    Int
  type           DependencyType @default(FINISH_TO_START)
  createdAt      DateTime       @default(now())

  // Relations
  predecessor    Task           @relation("TaskPredecessors", fields: [predecessorId], references: [id], onDelete: Cascade)
  successor      Task           @relation("TaskSuccessors", fields: [successorId], references: [id], onDelete: Cascade)

  @@unique([predecessorId, successorId])
  @@index([predecessorId])
  @@index([successorId])
}

model TimeLog {
  id        Int       @id @default(autoincrement())
  taskId    Int
  userId    Int
  startTime DateTime
  endTime   DateTime?
  duration  Float?    // Duration in hours
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  // Relations
  task      Task      @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([taskId])
  @@index([userId])
  @@index([startTime])
}
