generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                      Int                      @id @default(autoincrement())
  email                   String                   @unique
  password                String
  name                    String
  role                    Role                     @default(TEAM_MEMBER)
  avatarUrl               String?
  googleAccessToken       String?
  googleRefreshToken      String?
  createdAt               DateTime                 @default(now())
  updatedAt               DateTime                 @updatedAt
  projects                ProjectMember[]
  assignedTasks           Task[]
  timeLogs                TimeLog[]
  ownedWorkspaces         Workspace[]              @relation("WorkspaceOwner")
  sentInvitations         WorkspaceInvitation[]    @relation("InvitationSender")
  workspaceMemberships    WorkspaceMember[]
  comments                Comment[]
  mentions                CommentMention[]
  notifications           Notification[]
  deviceTokens            DeviceToken[]
  notificationPreferences NotificationPreferences?
  notificationLogs        NotificationLog[]
  projectRoles            ProjectRoleMember[]
  assignedRoles           ProjectRoleMember[]      @relation("RoleAssigner")
  auditLogs               RoleAuditLog[]

  @@index([email])
}

model Workspace {
  id                       Int                   @id @default(autoincrement())
  name                     String
  description              String?
  avatarUrl                String?
  type                     WorkspaceType         @default(TEAM)
  ownerId                  Int
  allowGuestInvites        Boolean               @default(true)
  requireEmailVerification Boolean               @default(true)
  autoAssignNewMembers     Boolean               @default(false)
  defaultProjectTemplate   String?
  timezone                 String                @default("UTC")
  language                 String                @default("es")
  createdAt                DateTime              @default(now())
  updatedAt                DateTime              @updatedAt
  projects                 Project[]
  owner                    User                  @relation("WorkspaceOwner", fields: [ownerId], references: [id], onDelete: Cascade)
  invitations              WorkspaceInvitation[]
  members                  WorkspaceMember[]

  @@index([ownerId])
  @@index([name])
}

model WorkspaceMember {
  id           Int           @id @default(autoincrement())
  workspaceId  Int
  userId       Int
  role         WorkspaceRole @default(MEMBER)
  joinedAt     DateTime      @default(now())
  lastActiveAt DateTime?
  isActive     Boolean       @default(true)
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  workspace    Workspace     @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@unique([workspaceId, userId])
  @@index([workspaceId])
  @@index([userId])
}

model WorkspaceInvitation {
  id            Int              @id @default(autoincrement())
  workspaceId   Int
  inviterUserId Int
  inviteeEmail  String
  role          WorkspaceRole    @default(MEMBER)
  token         String           @unique
  status        InvitationStatus @default(PENDING)
  createdAt     DateTime         @default(now())
  expiresAt     DateTime
  inviter       User             @relation("InvitationSender", fields: [inviterUserId], references: [id], onDelete: Cascade)
  workspace     Workspace        @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@index([workspaceId])
  @@index([inviteeEmail])
  @@index([token])
}

model Project {
  id          Int             @id @default(autoincrement())
  name        String
  description String?
  workspaceId Int
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  workspace   Workspace       @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  members     ProjectMember[]
  tasks       Task[]
  comments    Comment[]
  roles       ProjectRole[]

  @@index([workspaceId])
  @@index([name])
}

model ProjectMember {
  id        Int      @id @default(autoincrement())
  userId    Int
  projectId Int
  joinedAt  DateTime @default(now())
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, projectId])
  @@index([userId])
  @@index([projectId])
}

model Task {
  id                   Int                   @id @default(autoincrement())
  title                String
  description          String?
  status               TaskStatus            @default(PLANNED)
  category             TaskCategory?
  estimatedHours       Float
  actualHours          Float                 @default(0)
  startDate            DateTime?
  endDate              DateTime?
  projectId            Int
  assigneeId           Int?
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  predecessors         Dependency[]          @relation("TaskPredecessors")
  successors           Dependency[]          @relation("TaskSuccessors")
  assignee             User?                 @relation(fields: [assigneeId], references: [id])
  project              Project               @relation(fields: [projectId], references: [id], onDelete: Cascade)
  timeLogs             TimeLog[]
  comments             Comment[]
  categorySuggestions  CategorySuggestion[]
  categoryFeedbacks    CategoryFeedback[]

  @@index([projectId])
  @@index([assigneeId])
  @@index([status])
  @@index([category])
}

model Dependency {
  id            Int            @id @default(autoincrement())
  predecessorId Int
  successorId   Int
  type          DependencyType @default(FINISH_TO_START)
  createdAt     DateTime       @default(now())
  predecessor   Task           @relation("TaskPredecessors", fields: [predecessorId], references: [id], onDelete: Cascade)
  successor     Task           @relation("TaskSuccessors", fields: [successorId], references: [id], onDelete: Cascade)

  @@unique([predecessorId, successorId])
  @@index([predecessorId])
  @@index([successorId])
}

model TimeLog {
  id        Int       @id @default(autoincrement())
  taskId    Int
  userId    Int
  startTime DateTime
  endTime   DateTime?
  duration  Float?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  task      Task      @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([taskId])
  @@index([userId])
  @@index([startTime])
}

enum Role {
  ADMIN
  PROJECT_MANAGER
  TEAM_MEMBER
}

enum TaskStatus {
  PLANNED
  IN_PROGRESS
  COMPLETED
}

enum DependencyType {
  FINISH_TO_START
  START_TO_START
}

enum WorkspaceType {
  PERSONAL
  TEAM
  ENTERPRISE
}

enum WorkspaceRole {
  OWNER
  ADMIN
  MEMBER
  GUEST
}

enum InvitationStatus {
  PENDING
  ACCEPTED
  DECLINED
  EXPIRED
}

model Comment {
  id          Int              @id @default(autoincrement())
  content     String
  taskId      Int?
  projectId   Int?
  parentId    Int?
  authorId    Int
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  isEdited    Boolean          @default(false)
  task        Task?            @relation(fields: [taskId], references: [id], onDelete: Cascade)
  project     Project?         @relation(fields: [projectId], references: [id], onDelete: Cascade)
  author      User             @relation(fields: [authorId], references: [id], onDelete: Cascade)
  parent      Comment?         @relation("CommentThread", fields: [parentId], references: [id], onDelete: Cascade)
  replies     Comment[]        @relation("CommentThread")
  mentions    CommentMention[]

  @@index([taskId])
  @@index([projectId])
  @@index([authorId])
  @@index([parentId])
  @@index([createdAt])
}

model CommentMention {
  id        Int      @id @default(autoincrement())
  commentId Int
  userId    Int
  createdAt DateTime @default(now())
  comment   Comment  @relation(fields: [commentId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([commentId, userId])
  @@index([commentId])
  @@index([userId])
}

model Notification {
  id           Int              @id @default(autoincrement())
  userId       Int
  type         NotificationType
  title        String
  message      String
  isRead       Boolean          @default(false)
  relatedId    Int?
  relatedType  String?
  createdAt    DateTime         @default(now())
  readAt       DateTime?
  user         User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([isRead])
  @@index([createdAt])
}

enum NotificationType {
  MENTION
  COMMENT_REPLY
  TASK_ASSIGNED
  TASK_UPDATED
  PROJECT_UPDATED
  SYSTEM
}

enum TaskCategory {
  DEVELOPMENT
  DESIGN
  TESTING
  DOCUMENTATION
  MEETING
  BUG
  FEATURE
  MAINTENANCE
  RESEARCH
  DEPLOYMENT
  REVIEW
  PLANNING
}

model CategorySuggestion {
  id                Int          @id @default(autoincrement())
  taskId            Int
  suggestedCategory TaskCategory
  confidence        Float
  reasoning         String
  keywords          String[]
  isApplied         Boolean      @default(false)
  createdAt         DateTime     @default(now())
  task              Task         @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@index([taskId])
  @@index([suggestedCategory])
  @@index([createdAt])
}

model CategoryFeedback {
  id                Int           @id @default(autoincrement())
  taskId            Int
  suggestedCategory TaskCategory
  correctedCategory TaskCategory?
  wasCorrect        Boolean
  userComment       String?
  createdAt         DateTime      @default(now())
  task              Task          @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@index([taskId])
  @@index([createdAt])
  @@index([wasCorrect])
}

model DeviceToken {
  id        Int          @id @default(autoincrement())
  userId    Int
  token     String       @unique
  platform  Platform
  isActive  Boolean      @default(true)
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  user      User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([token])
  @@index([isActive])
}

model NotificationPreferences {
  id                        Int      @id @default(autoincrement())
  userId                    Int      @unique
  pushEnabled               Boolean  @default(true)
  emailEnabled              Boolean  @default(true)
  mentionNotifications      Boolean  @default(true)
  commentReplyNotifications Boolean  @default(true)
  taskAssignedNotifications Boolean  @default(true)
  taskUpdatedNotifications  Boolean  @default(true)
  projectUpdatedNotifications Boolean @default(true)
  systemNotifications       Boolean  @default(true)
  createdAt                 DateTime @default(now())
  updatedAt                 DateTime @updatedAt
  user                      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model NotificationLog {
  id              Int              @id @default(autoincrement())
  userId          Int
  notificationId  Int?
  type            NotificationType
  platform        Platform?
  status          DeliveryStatus
  errorMessage    String?
  sentAt          DateTime         @default(now())
  deliveredAt     DateTime?
  user            User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([notificationId])
  @@index([status])
  @@index([sentAt])
}

enum Platform {
  WEB
  IOS
  ANDROID
}

enum DeliveryStatus {
  PENDING
  SENT
  DELIVERED
  FAILED
}

model ProjectRole {
  id          Int                @id @default(autoincrement())
  projectId   Int
  name        String
  description String?
  isDefault   Boolean            @default(false)
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  project     Project            @relation(fields: [projectId], references: [id], onDelete: Cascade)
  permissions ProjectPermission[]
  members     ProjectRoleMember[]
  auditLogs   RoleAuditLog[]

  @@unique([projectId, name])
  @@index([projectId])
}

model ProjectPermission {
  id           Int         @id @default(autoincrement())
  roleId       Int
  resource     String
  action       String
  granted      Boolean     @default(true)
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  role         ProjectRole @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@unique([roleId, resource, action])
  @@index([roleId])
  @@index([resource])
}

model ProjectRoleMember {
  id        Int         @id @default(autoincrement())
  userId    Int
  roleId    Int
  assignedAt DateTime   @default(now())
  assignedBy Int?
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  role      ProjectRole @relation(fields: [roleId], references: [id], onDelete: Cascade)
  assigner  User?       @relation("RoleAssigner", fields: [assignedBy], references: [id])

  @@unique([userId, roleId])
  @@index([userId])
  @@index([roleId])
}

model RoleAuditLog {
  id          Int         @id @default(autoincrement())
  roleId      Int
  userId      Int
  action      AuditAction
  details     String?
  createdAt   DateTime    @default(now())
  role        ProjectRole @relation(fields: [roleId], references: [id], onDelete: Cascade)
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([roleId])
  @@index([userId])
  @@index([createdAt])
}

enum AuditAction {
  ROLE_CREATED
  ROLE_UPDATED
  ROLE_DELETED
  PERMISSION_GRANTED
  PERMISSION_REVOKED
  MEMBER_ASSIGNED
  MEMBER_REMOVED
}
